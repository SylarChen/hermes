/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ctrip.cmessaging.client.message;

import java.util.*;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

public class BasicHeader implements org.apache.thrift.TBase<BasicHeader, BasicHeader._Fields>, java.io.Serializable, Cloneable, Comparable<BasicHeader> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BasicHeader");

  private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("MessageID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EXCHANGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ExchangeName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONTENT_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("ContentLength", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CONTENT_ENCODING_FIELD_DESC = new org.apache.thrift.protocol.TField("ContentEncoding", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("Version", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SERIALIZATION_FIELD_DESC = new org.apache.thrift.protocol.TField("Serialization", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("Type", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField COMPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("Compression", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("Subject", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CORRELATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("CorrelationID", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SEQUENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("Sequence", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ClientID", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("AppID", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField ROUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("Route", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField RAW_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("RawType", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField USER_HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("UserHeader", org.apache.thrift.protocol.TType.MAP, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BasicHeaderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BasicHeaderTupleSchemeFactory());
  }

  public String MessageID; // required
  public String ExchangeName; // required
  public int ContentLength; // required
  public String ContentEncoding; // required
  public String Version; // optional
  /**
   * 
   * @see com.ctrip.cmessaging.client.content.SerializationType
   */
  public com.ctrip.cmessaging.client.content.SerializationType Serialization; // required
  /**
   * 
   * @see com.ctrip.cmessaging.client.content.MessageType
   */
  public com.ctrip.cmessaging.client.content.MessageType Type; // required
  /**
   * 
   * @see com.ctrip.cmessaging.client.content.CompressionType
   */
  public com.ctrip.cmessaging.client.content.CompressionType Compression; // required
  public String Subject; // optional
  public String CorrelationID; // optional
  public String Sequence; // optional
  public String ClientID; // optional
  public String AppID; // optional
  public String Route; // optional
  public String RawType; // optional
  public long timestamp; // optional
  public Map<String,String> UserHeader; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MESSAGE_ID((short)1, "MessageID"),
    EXCHANGE_NAME((short)2, "ExchangeName"),
    CONTENT_LENGTH((short)3, "ContentLength"),
    CONTENT_ENCODING((short)4, "ContentEncoding"),
    VERSION((short)5, "Version"),
    /**
     * 
     * @see com.ctrip.cmessaging.client.content.SerializationType
     */
    SERIALIZATION((short)6, "Serialization"),
    /**
     * 
     * @see com.ctrip.cmessaging.client.content.MessageType
     */
    TYPE((short)7, "Type"),
    /**
     * 
     * @see com.ctrip.cmessaging.client.content.CompressionType
     */
    COMPRESSION((short)8, "Compression"),
    SUBJECT((short)9, "Subject"),
    CORRELATION_ID((short)10, "CorrelationID"),
    SEQUENCE((short)11, "Sequence"),
    CLIENT_ID((short)12, "ClientID"),
    APP_ID((short)13, "AppID"),
    ROUTE((short)14, "Route"),
    RAW_TYPE((short)15, "RawType"),
    TIMESTAMP((short)16, "timestamp"),
    USER_HEADER((short)17, "UserHeader");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MESSAGE_ID
          return MESSAGE_ID;
        case 2: // EXCHANGE_NAME
          return EXCHANGE_NAME;
        case 3: // CONTENT_LENGTH
          return CONTENT_LENGTH;
        case 4: // CONTENT_ENCODING
          return CONTENT_ENCODING;
        case 5: // VERSION
          return VERSION;
        case 6: // SERIALIZATION
          return SERIALIZATION;
        case 7: // TYPE
          return TYPE;
        case 8: // COMPRESSION
          return COMPRESSION;
        case 9: // SUBJECT
          return SUBJECT;
        case 10: // CORRELATION_ID
          return CORRELATION_ID;
        case 11: // SEQUENCE
          return SEQUENCE;
        case 12: // CLIENT_ID
          return CLIENT_ID;
        case 13: // APP_ID
          return APP_ID;
        case 14: // ROUTE
          return ROUTE;
        case 15: // RAW_TYPE
          return RAW_TYPE;
        case 16: // TIMESTAMP
          return TIMESTAMP;
        case 17: // USER_HEADER
          return USER_HEADER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONTENTLENGTH_ISSET_ID = 0;
  private static final int __TIMESTAMP_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.VERSION, _Fields.SUBJECT, _Fields.CORRELATION_ID, _Fields.SEQUENCE, _Fields.CLIENT_ID, _Fields.APP_ID, _Fields.ROUTE, _Fields.RAW_TYPE, _Fields.TIMESTAMP, _Fields.USER_HEADER};
  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MESSAGE_ID, new FieldMetaData("MessageID", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXCHANGE_NAME, new FieldMetaData("ExchangeName", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT_LENGTH, new FieldMetaData("ContentLength", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTENT_ENCODING, new FieldMetaData("ContentEncoding", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new FieldMetaData("Version", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERIALIZATION, new FieldMetaData("Serialization", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ctrip.cmessaging.client.content.SerializationType.class)));
    tmpMap.put(_Fields.TYPE, new FieldMetaData("Type", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ctrip.cmessaging.client.content.MessageType.class)));
    tmpMap.put(_Fields.COMPRESSION, new FieldMetaData("Compression", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ctrip.cmessaging.client.content.CompressionType.class)));
    tmpMap.put(_Fields.SUBJECT, new FieldMetaData("Subject", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CORRELATION_ID, new FieldMetaData("CorrelationID", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEQUENCE, new FieldMetaData("Sequence", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ID, new FieldMetaData("ClientID", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_ID, new FieldMetaData("AppID", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROUTE, new FieldMetaData("Route", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RAW_TYPE, new FieldMetaData("RawType", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_HEADER, new FieldMetaData("UserHeader", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(BasicHeader.class, metaDataMap);
  }

  public BasicHeader() {
  }

  public BasicHeader(
          String MessageID,
          String ExchangeName,
          int ContentLength,
          String ContentEncoding,
          com.ctrip.cmessaging.client.content.SerializationType Serialization,
          com.ctrip.cmessaging.client.content.MessageType Type,
          com.ctrip.cmessaging.client.content.CompressionType Compression)
  {
    this();
    this.MessageID = MessageID;
    this.ExchangeName = ExchangeName;
    this.ContentLength = ContentLength;
    setContentLengthIsSet(true);
    this.ContentEncoding = ContentEncoding;
    this.Serialization = Serialization;
    this.Type = Type;
    this.Compression = Compression;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BasicHeader(BasicHeader other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMessageID()) {
      this.MessageID = other.MessageID;
    }
    if (other.isSetExchangeName()) {
      this.ExchangeName = other.ExchangeName;
    }
    this.ContentLength = other.ContentLength;
    if (other.isSetContentEncoding()) {
      this.ContentEncoding = other.ContentEncoding;
    }
    if (other.isSetVersion()) {
      this.Version = other.Version;
    }
    if (other.isSetSerialization()) {
      this.Serialization = other.Serialization;
    }
    if (other.isSetType()) {
      this.Type = other.Type;
    }
    if (other.isSetCompression()) {
      this.Compression = other.Compression;
    }
    if (other.isSetSubject()) {
      this.Subject = other.Subject;
    }
    if (other.isSetCorrelationID()) {
      this.CorrelationID = other.CorrelationID;
    }
    if (other.isSetSequence()) {
      this.Sequence = other.Sequence;
    }
    if (other.isSetClientID()) {
      this.ClientID = other.ClientID;
    }
    if (other.isSetAppID()) {
      this.AppID = other.AppID;
    }
    if (other.isSetRoute()) {
      this.Route = other.Route;
    }
    if (other.isSetRawType()) {
      this.RawType = other.RawType;
    }
    this.timestamp = other.timestamp;
    if (other.isSetUserHeader()) {
      Map<String,String> __this__UserHeader = new HashMap<String,String>(other.UserHeader);
      this.UserHeader = __this__UserHeader;
    }
  }

  public BasicHeader deepCopy() {
    return new BasicHeader(this);
  }

  @Override
  public void clear() {
    this.MessageID = null;
    this.ExchangeName = null;
    setContentLengthIsSet(false);
    this.ContentLength = 0;
    this.ContentEncoding = null;
    this.Version = null;
    this.Serialization = null;
    this.Type = null;
    this.Compression = null;
    this.Subject = null;
    this.CorrelationID = null;
    this.Sequence = null;
    this.ClientID = null;
    this.AppID = null;
    this.Route = null;
    this.RawType = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.UserHeader = null;
  }

  public String getMessageID() {
    return this.MessageID;
  }

  public BasicHeader setMessageID(String MessageID) {
    this.MessageID = MessageID;
    return this;
  }

  public void unsetMessageID() {
    this.MessageID = null;
  }

  /** Returns true if field MessageID is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageID() {
    return this.MessageID != null;
  }

  public void setMessageIDIsSet(boolean value) {
    if (!value) {
      this.MessageID = null;
    }
  }

  public String getExchangeName() {
    return this.ExchangeName;
  }

  public BasicHeader setExchangeName(String ExchangeName) {
    this.ExchangeName = ExchangeName;
    return this;
  }

  public void unsetExchangeName() {
    this.ExchangeName = null;
  }

  /** Returns true if field ExchangeName is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeName() {
    return this.ExchangeName != null;
  }

  public void setExchangeNameIsSet(boolean value) {
    if (!value) {
      this.ExchangeName = null;
    }
  }

  public int getContentLength() {
    return this.ContentLength;
  }

  public BasicHeader setContentLength(int ContentLength) {
    this.ContentLength = ContentLength;
    setContentLengthIsSet(true);
    return this;
  }

  public void unsetContentLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTENTLENGTH_ISSET_ID);
  }

  /** Returns true if field ContentLength is set (has been assigned a value) and false otherwise */
  public boolean isSetContentLength() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTENTLENGTH_ISSET_ID);
  }

  public void setContentLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTENTLENGTH_ISSET_ID, value);
  }

  public String getContentEncoding() {
    return this.ContentEncoding;
  }

  public BasicHeader setContentEncoding(String ContentEncoding) {
    this.ContentEncoding = ContentEncoding;
    return this;
  }

  public void unsetContentEncoding() {
    this.ContentEncoding = null;
  }

  /** Returns true if field ContentEncoding is set (has been assigned a value) and false otherwise */
  public boolean isSetContentEncoding() {
    return this.ContentEncoding != null;
  }

  public void setContentEncodingIsSet(boolean value) {
    if (!value) {
      this.ContentEncoding = null;
    }
  }

  public String getVersion() {
    return this.Version;
  }

  public BasicHeader setVersion(String Version) {
    this.Version = Version;
    return this;
  }

  public void unsetVersion() {
    this.Version = null;
  }

  /** Returns true if field Version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.Version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.Version = null;
    }
  }

  /**
   * 
   * @see com.ctrip.cmessaging.client.content.SerializationType
   */
  public com.ctrip.cmessaging.client.content.SerializationType getSerialization() {
    return this.Serialization;
  }

  /**
   * 
   * @see com.ctrip.cmessaging.client.content.SerializationType
   */
  public BasicHeader setSerialization(com.ctrip.cmessaging.client.content.SerializationType Serialization) {
    this.Serialization = Serialization;
    return this;
  }

  public void unsetSerialization() {
    this.Serialization = null;
  }

  /** Returns true if field Serialization is set (has been assigned a value) and false otherwise */
  public boolean isSetSerialization() {
    return this.Serialization != null;
  }

  public void setSerializationIsSet(boolean value) {
    if (!value) {
      this.Serialization = null;
    }
  }

  /**
   * 
   * @see com.ctrip.cmessaging.client.content.MessageType
   */
  public com.ctrip.cmessaging.client.content.MessageType getType() {
    return this.Type;
  }

  /**
   * 
   * @see com.ctrip.cmessaging.client.content.MessageType
   */
  public BasicHeader setType(com.ctrip.cmessaging.client.content.MessageType Type) {
    this.Type = Type;
    return this;
  }

  public void unsetType() {
    this.Type = null;
  }

  /** Returns true if field Type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.Type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.Type = null;
    }
  }

  /**
   * 
   * @see com.ctrip.cmessaging.client.content.CompressionType
   */
  public com.ctrip.cmessaging.client.content.CompressionType getCompression() {
    return this.Compression;
  }

  /**
   * 
   * @see com.ctrip.cmessaging.client.content.CompressionType
   */
  public BasicHeader setCompression(com.ctrip.cmessaging.client.content.CompressionType Compression) {
    this.Compression = Compression;
    return this;
  }

  public void unsetCompression() {
    this.Compression = null;
  }

  /** Returns true if field Compression is set (has been assigned a value) and false otherwise */
  public boolean isSetCompression() {
    return this.Compression != null;
  }

  public void setCompressionIsSet(boolean value) {
    if (!value) {
      this.Compression = null;
    }
  }

  public String getSubject() {
    return this.Subject;
  }

  public BasicHeader setSubject(String Subject) {
    this.Subject = Subject;
    return this;
  }

  public void unsetSubject() {
    this.Subject = null;
  }

  /** Returns true if field Subject is set (has been assigned a value) and false otherwise */
  public boolean isSetSubject() {
    return this.Subject != null;
  }

  public void setSubjectIsSet(boolean value) {
    if (!value) {
      this.Subject = null;
    }
  }

  public String getCorrelationID() {
    return this.CorrelationID;
  }

  public BasicHeader setCorrelationID(String CorrelationID) {
    this.CorrelationID = CorrelationID;
    return this;
  }

  public void unsetCorrelationID() {
    this.CorrelationID = null;
  }

  /** Returns true if field CorrelationID is set (has been assigned a value) and false otherwise */
  public boolean isSetCorrelationID() {
    return this.CorrelationID != null;
  }

  public void setCorrelationIDIsSet(boolean value) {
    if (!value) {
      this.CorrelationID = null;
    }
  }

  public String getSequence() {
    return this.Sequence;
  }

  public BasicHeader setSequence(String Sequence) {
    this.Sequence = Sequence;
    return this;
  }

  public void unsetSequence() {
    this.Sequence = null;
  }

  /** Returns true if field Sequence is set (has been assigned a value) and false otherwise */
  public boolean isSetSequence() {
    return this.Sequence != null;
  }

  public void setSequenceIsSet(boolean value) {
    if (!value) {
      this.Sequence = null;
    }
  }

  public String getClientID() {
    return this.ClientID;
  }

  public BasicHeader setClientID(String ClientID) {
    this.ClientID = ClientID;
    return this;
  }

  public void unsetClientID() {
    this.ClientID = null;
  }

  /** Returns true if field ClientID is set (has been assigned a value) and false otherwise */
  public boolean isSetClientID() {
    return this.ClientID != null;
  }

  public void setClientIDIsSet(boolean value) {
    if (!value) {
      this.ClientID = null;
    }
  }

  public String getAppID() {
    return this.AppID;
  }

  public BasicHeader setAppID(String AppID) {
    this.AppID = AppID;
    return this;
  }

  public void unsetAppID() {
    this.AppID = null;
  }

  /** Returns true if field AppID is set (has been assigned a value) and false otherwise */
  public boolean isSetAppID() {
    return this.AppID != null;
  }

  public void setAppIDIsSet(boolean value) {
    if (!value) {
      this.AppID = null;
    }
  }

  public String getRoute() {
    return this.Route;
  }

  public BasicHeader setRoute(String Route) {
    this.Route = Route;
    return this;
  }

  public void unsetRoute() {
    this.Route = null;
  }

  /** Returns true if field Route is set (has been assigned a value) and false otherwise */
  public boolean isSetRoute() {
    return this.Route != null;
  }

  public void setRouteIsSet(boolean value) {
    if (!value) {
      this.Route = null;
    }
  }

  public String getRawType() {
    return this.RawType;
  }

  public BasicHeader setRawType(String RawType) {
    this.RawType = RawType;
    return this;
  }

  public void unsetRawType() {
    this.RawType = null;
  }

  /** Returns true if field RawType is set (has been assigned a value) and false otherwise */
  public boolean isSetRawType() {
    return this.RawType != null;
  }

  public void setRawTypeIsSet(boolean value) {
    if (!value) {
      this.RawType = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public BasicHeader setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public int getUserHeaderSize() {
    return (this.UserHeader == null) ? 0 : this.UserHeader.size();
  }

  public void putToUserHeader(String key, String val) {
    if (this.UserHeader == null) {
      this.UserHeader = new HashMap<String,String>();
    }
    this.UserHeader.put(key, val);
  }

  public Map<String,String> getUserHeader() {
    return this.UserHeader;
  }

  public BasicHeader setUserHeader(Map<String,String> UserHeader) {
    this.UserHeader = UserHeader;
    return this;
  }

  public void unsetUserHeader() {
    this.UserHeader = null;
  }

  /** Returns true if field UserHeader is set (has been assigned a value) and false otherwise */
  public boolean isSetUserHeader() {
    return this.UserHeader != null;
  }

  public void setUserHeaderIsSet(boolean value) {
    if (!value) {
      this.UserHeader = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MESSAGE_ID:
      if (value == null) {
        unsetMessageID();
      } else {
        setMessageID((String)value);
      }
      break;

    case EXCHANGE_NAME:
      if (value == null) {
        unsetExchangeName();
      } else {
        setExchangeName((String)value);
      }
      break;

    case CONTENT_LENGTH:
      if (value == null) {
        unsetContentLength();
      } else {
        setContentLength((Integer)value);
      }
      break;

    case CONTENT_ENCODING:
      if (value == null) {
        unsetContentEncoding();
      } else {
        setContentEncoding((String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((String)value);
      }
      break;

    case SERIALIZATION:
      if (value == null) {
        unsetSerialization();
      } else {
        setSerialization((com.ctrip.cmessaging.client.content.SerializationType)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((com.ctrip.cmessaging.client.content.MessageType)value);
      }
      break;

    case COMPRESSION:
      if (value == null) {
        unsetCompression();
      } else {
        setCompression((com.ctrip.cmessaging.client.content.CompressionType)value);
      }
      break;

    case SUBJECT:
      if (value == null) {
        unsetSubject();
      } else {
        setSubject((String)value);
      }
      break;

    case CORRELATION_ID:
      if (value == null) {
        unsetCorrelationID();
      } else {
        setCorrelationID((String)value);
      }
      break;

    case SEQUENCE:
      if (value == null) {
        unsetSequence();
      } else {
        setSequence((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientID();
      } else {
        setClientID((String)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppID();
      } else {
        setAppID((String)value);
      }
      break;

    case ROUTE:
      if (value == null) {
        unsetRoute();
      } else {
        setRoute((String)value);
      }
      break;

    case RAW_TYPE:
      if (value == null) {
        unsetRawType();
      } else {
        setRawType((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case USER_HEADER:
      if (value == null) {
        unsetUserHeader();
      } else {
        setUserHeader((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MESSAGE_ID:
      return getMessageID();

    case EXCHANGE_NAME:
      return getExchangeName();

    case CONTENT_LENGTH:
      return Integer.valueOf(getContentLength());

    case CONTENT_ENCODING:
      return getContentEncoding();

    case VERSION:
      return getVersion();

    case SERIALIZATION:
      return getSerialization();

    case TYPE:
      return getType();

    case COMPRESSION:
      return getCompression();

    case SUBJECT:
      return getSubject();

    case CORRELATION_ID:
      return getCorrelationID();

    case SEQUENCE:
      return getSequence();

    case CLIENT_ID:
      return getClientID();

    case APP_ID:
      return getAppID();

    case ROUTE:
      return getRoute();

    case RAW_TYPE:
      return getRawType();

    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case USER_HEADER:
      return getUserHeader();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MESSAGE_ID:
      return isSetMessageID();
    case EXCHANGE_NAME:
      return isSetExchangeName();
    case CONTENT_LENGTH:
      return isSetContentLength();
    case CONTENT_ENCODING:
      return isSetContentEncoding();
    case VERSION:
      return isSetVersion();
    case SERIALIZATION:
      return isSetSerialization();
    case TYPE:
      return isSetType();
    case COMPRESSION:
      return isSetCompression();
    case SUBJECT:
      return isSetSubject();
    case CORRELATION_ID:
      return isSetCorrelationID();
    case SEQUENCE:
      return isSetSequence();
    case CLIENT_ID:
      return isSetClientID();
    case APP_ID:
      return isSetAppID();
    case ROUTE:
      return isSetRoute();
    case RAW_TYPE:
      return isSetRawType();
    case TIMESTAMP:
      return isSetTimestamp();
    case USER_HEADER:
      return isSetUserHeader();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BasicHeader)
      return this.equals((BasicHeader)that);
    return false;
  }

  public boolean equals(BasicHeader that) {
    if (that == null)
      return false;

    boolean this_present_MessageID = true && this.isSetMessageID();
    boolean that_present_MessageID = true && that.isSetMessageID();
    if (this_present_MessageID || that_present_MessageID) {
      if (!(this_present_MessageID && that_present_MessageID))
        return false;
      if (!this.MessageID.equals(that.MessageID))
        return false;
    }

    boolean this_present_ExchangeName = true && this.isSetExchangeName();
    boolean that_present_ExchangeName = true && that.isSetExchangeName();
    if (this_present_ExchangeName || that_present_ExchangeName) {
      if (!(this_present_ExchangeName && that_present_ExchangeName))
        return false;
      if (!this.ExchangeName.equals(that.ExchangeName))
        return false;
    }

    boolean this_present_ContentLength = true;
    boolean that_present_ContentLength = true;
    if (this_present_ContentLength || that_present_ContentLength) {
      if (!(this_present_ContentLength && that_present_ContentLength))
        return false;
      if (this.ContentLength != that.ContentLength)
        return false;
    }

    boolean this_present_ContentEncoding = true && this.isSetContentEncoding();
    boolean that_present_ContentEncoding = true && that.isSetContentEncoding();
    if (this_present_ContentEncoding || that_present_ContentEncoding) {
      if (!(this_present_ContentEncoding && that_present_ContentEncoding))
        return false;
      if (!this.ContentEncoding.equals(that.ContentEncoding))
        return false;
    }

    boolean this_present_Version = true && this.isSetVersion();
    boolean that_present_Version = true && that.isSetVersion();
    if (this_present_Version || that_present_Version) {
      if (!(this_present_Version && that_present_Version))
        return false;
      if (!this.Version.equals(that.Version))
        return false;
    }

    boolean this_present_Serialization = true && this.isSetSerialization();
    boolean that_present_Serialization = true && that.isSetSerialization();
    if (this_present_Serialization || that_present_Serialization) {
      if (!(this_present_Serialization && that_present_Serialization))
        return false;
      if (!this.Serialization.equals(that.Serialization))
        return false;
    }

    boolean this_present_Type = true && this.isSetType();
    boolean that_present_Type = true && that.isSetType();
    if (this_present_Type || that_present_Type) {
      if (!(this_present_Type && that_present_Type))
        return false;
      if (!this.Type.equals(that.Type))
        return false;
    }

    boolean this_present_Compression = true && this.isSetCompression();
    boolean that_present_Compression = true && that.isSetCompression();
    if (this_present_Compression || that_present_Compression) {
      if (!(this_present_Compression && that_present_Compression))
        return false;
      if (!this.Compression.equals(that.Compression))
        return false;
    }

    boolean this_present_Subject = true && this.isSetSubject();
    boolean that_present_Subject = true && that.isSetSubject();
    if (this_present_Subject || that_present_Subject) {
      if (!(this_present_Subject && that_present_Subject))
        return false;
      if (!this.Subject.equals(that.Subject))
        return false;
    }

    boolean this_present_CorrelationID = true && this.isSetCorrelationID();
    boolean that_present_CorrelationID = true && that.isSetCorrelationID();
    if (this_present_CorrelationID || that_present_CorrelationID) {
      if (!(this_present_CorrelationID && that_present_CorrelationID))
        return false;
      if (!this.CorrelationID.equals(that.CorrelationID))
        return false;
    }

    boolean this_present_Sequence = true && this.isSetSequence();
    boolean that_present_Sequence = true && that.isSetSequence();
    if (this_present_Sequence || that_present_Sequence) {
      if (!(this_present_Sequence && that_present_Sequence))
        return false;
      if (!this.Sequence.equals(that.Sequence))
        return false;
    }

    boolean this_present_ClientID = true && this.isSetClientID();
    boolean that_present_ClientID = true && that.isSetClientID();
    if (this_present_ClientID || that_present_ClientID) {
      if (!(this_present_ClientID && that_present_ClientID))
        return false;
      if (!this.ClientID.equals(that.ClientID))
        return false;
    }

    boolean this_present_AppID = true && this.isSetAppID();
    boolean that_present_AppID = true && that.isSetAppID();
    if (this_present_AppID || that_present_AppID) {
      if (!(this_present_AppID && that_present_AppID))
        return false;
      if (!this.AppID.equals(that.AppID))
        return false;
    }

    boolean this_present_Route = true && this.isSetRoute();
    boolean that_present_Route = true && that.isSetRoute();
    if (this_present_Route || that_present_Route) {
      if (!(this_present_Route && that_present_Route))
        return false;
      if (!this.Route.equals(that.Route))
        return false;
    }

    boolean this_present_RawType = true && this.isSetRawType();
    boolean that_present_RawType = true && that.isSetRawType();
    if (this_present_RawType || that_present_RawType) {
      if (!(this_present_RawType && that_present_RawType))
        return false;
      if (!this.RawType.equals(that.RawType))
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_UserHeader = true && this.isSetUserHeader();
    boolean that_present_UserHeader = true && that.isSetUserHeader();
    if (this_present_UserHeader || that_present_UserHeader) {
      if (!(this_present_UserHeader && that_present_UserHeader))
        return false;
      if (!this.UserHeader.equals(that.UserHeader))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(BasicHeader other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMessageID()).compareTo(other.isSetMessageID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MessageID, other.MessageID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeName()).compareTo(other.isSetExchangeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ExchangeName, other.ExchangeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentLength()).compareTo(other.isSetContentLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ContentLength, other.ContentLength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentEncoding()).compareTo(other.isSetContentEncoding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentEncoding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ContentEncoding, other.ContentEncoding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Version, other.Version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerialization()).compareTo(other.isSetSerialization());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerialization()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Serialization, other.Serialization);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Type, other.Type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompression()).compareTo(other.isSetCompression());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompression()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Compression, other.Compression);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubject()).compareTo(other.isSetSubject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Subject, other.Subject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorrelationID()).compareTo(other.isSetCorrelationID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorrelationID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CorrelationID, other.CorrelationID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSequence()).compareTo(other.isSetSequence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Sequence, other.Sequence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientID()).compareTo(other.isSetClientID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ClientID, other.ClientID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppID()).compareTo(other.isSetAppID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AppID, other.AppID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoute()).compareTo(other.isSetRoute());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoute()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Route, other.Route);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRawType()).compareTo(other.isSetRawType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRawType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RawType, other.RawType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserHeader()).compareTo(other.isSetUserHeader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserHeader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UserHeader, other.UserHeader);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BasicHeader(");
    boolean first = true;

    sb.append("MessageID:");
    if (this.MessageID == null) {
      sb.append("null");
    } else {
      sb.append(this.MessageID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ExchangeName:");
    if (this.ExchangeName == null) {
      sb.append("null");
    } else {
      sb.append(this.ExchangeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ContentLength:");
    sb.append(this.ContentLength);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ContentEncoding:");
    if (this.ContentEncoding == null) {
      sb.append("null");
    } else {
      sb.append(this.ContentEncoding);
    }
    first = false;
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("Version:");
      if (this.Version == null) {
        sb.append("null");
      } else {
        sb.append(this.Version);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("Serialization:");
    if (this.Serialization == null) {
      sb.append("null");
    } else {
      sb.append(this.Serialization);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Type:");
    if (this.Type == null) {
      sb.append("null");
    } else {
      sb.append(this.Type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Compression:");
    if (this.Compression == null) {
      sb.append("null");
    } else {
      sb.append(this.Compression);
    }
    first = false;
    if (isSetSubject()) {
      if (!first) sb.append(", ");
      sb.append("Subject:");
      if (this.Subject == null) {
        sb.append("null");
      } else {
        sb.append(this.Subject);
      }
      first = false;
    }
    if (isSetCorrelationID()) {
      if (!first) sb.append(", ");
      sb.append("CorrelationID:");
      if (this.CorrelationID == null) {
        sb.append("null");
      } else {
        sb.append(this.CorrelationID);
      }
      first = false;
    }
    if (isSetSequence()) {
      if (!first) sb.append(", ");
      sb.append("Sequence:");
      if (this.Sequence == null) {
        sb.append("null");
      } else {
        sb.append(this.Sequence);
      }
      first = false;
    }
    if (isSetClientID()) {
      if (!first) sb.append(", ");
      sb.append("ClientID:");
      if (this.ClientID == null) {
        sb.append("null");
      } else {
        sb.append(this.ClientID);
      }
      first = false;
    }
    if (isSetAppID()) {
      if (!first) sb.append(", ");
      sb.append("AppID:");
      if (this.AppID == null) {
        sb.append("null");
      } else {
        sb.append(this.AppID);
      }
      first = false;
    }
    if (isSetRoute()) {
      if (!first) sb.append(", ");
      sb.append("Route:");
      if (this.Route == null) {
        sb.append("null");
      } else {
        sb.append(this.Route);
      }
      first = false;
    }
    if (isSetRawType()) {
      if (!first) sb.append(", ");
      sb.append("RawType:");
      if (this.RawType == null) {
        sb.append("null");
      } else {
        sb.append(this.RawType);
      }
      first = false;
    }
    if (isSetTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
    }
    if (isSetUserHeader()) {
      if (!first) sb.append(", ");
      sb.append("UserHeader:");
      if (this.UserHeader == null) {
        sb.append("null");
      } else {
        sb.append(this.UserHeader);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (MessageID == null) {
      throw new TProtocolException("Required field 'MessageID' was not present! Struct: " + toString());
    }
    if (ExchangeName == null) {
      throw new TProtocolException("Required field 'ExchangeName' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'ContentLength' because it's a primitive and you chose the non-beans generator.
    if (ContentEncoding == null) {
      throw new TProtocolException("Required field 'ContentEncoding' was not present! Struct: " + toString());
    }
    if (Serialization == null) {
      throw new TProtocolException("Required field 'Serialization' was not present! Struct: " + toString());
    }
    if (Type == null) {
      throw new TProtocolException("Required field 'Type' was not present! Struct: " + toString());
    }
    if (Compression == null) {
      throw new TProtocolException("Required field 'Compression' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BasicHeaderStandardSchemeFactory implements SchemeFactory {
    public BasicHeaderStandardScheme getScheme() {
      return new BasicHeaderStandardScheme();
    }
  }

  private static class BasicHeaderStandardScheme extends StandardScheme<BasicHeader> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BasicHeader struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.MessageID = iprot.readString();
              struct.setMessageIDIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXCHANGE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ExchangeName = iprot.readString();
              struct.setExchangeNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTENT_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ContentLength = iprot.readI32();
              struct.setContentLengthIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTENT_ENCODING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ContentEncoding = iprot.readString();
              struct.setContentEncodingIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Version = iprot.readString();
              struct.setVersionIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SERIALIZATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Serialization = com.ctrip.cmessaging.client.content.SerializationType.findByValue(iprot.readI32());
              struct.setSerializationIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Type = com.ctrip.cmessaging.client.content.MessageType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COMPRESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Compression = com.ctrip.cmessaging.client.content.CompressionType.findByValue(iprot.readI32());
              struct.setCompressionIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SUBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Subject = iprot.readString();
              struct.setSubjectIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CORRELATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.CorrelationID = iprot.readString();
              struct.setCorrelationIDIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SEQUENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Sequence = iprot.readString();
              struct.setSequenceIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ClientID = iprot.readString();
              struct.setClientIDIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.AppID = iprot.readString();
              struct.setAppIDIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ROUTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Route = iprot.readString();
              struct.setRouteIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // RAW_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.RawType = iprot.readString();
              struct.setRawTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // USER_HEADER
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.UserHeader = new HashMap<String,String>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2;
                  String _val3;
                  _key2 = iprot.readString();
                  _val3 = iprot.readString();
                  struct.UserHeader.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setUserHeaderIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetContentLength()) {
        throw new TProtocolException("Required field 'ContentLength' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BasicHeader struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.MessageID != null) {
        oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
        oprot.writeString(struct.MessageID);
        oprot.writeFieldEnd();
      }
      if (struct.ExchangeName != null) {
        oprot.writeFieldBegin(EXCHANGE_NAME_FIELD_DESC);
        oprot.writeString(struct.ExchangeName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONTENT_LENGTH_FIELD_DESC);
      oprot.writeI32(struct.ContentLength);
      oprot.writeFieldEnd();
      if (struct.ContentEncoding != null) {
        oprot.writeFieldBegin(CONTENT_ENCODING_FIELD_DESC);
        oprot.writeString(struct.ContentEncoding);
        oprot.writeFieldEnd();
      }
      if (struct.Version != null) {
        if (struct.isSetVersion()) {
          oprot.writeFieldBegin(VERSION_FIELD_DESC);
          oprot.writeString(struct.Version);
          oprot.writeFieldEnd();
        }
      }
      if (struct.Serialization != null) {
        oprot.writeFieldBegin(SERIALIZATION_FIELD_DESC);
        oprot.writeI32(struct.Serialization.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.Type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.Type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.Compression != null) {
        oprot.writeFieldBegin(COMPRESSION_FIELD_DESC);
        oprot.writeI32(struct.Compression.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.Subject != null) {
        if (struct.isSetSubject()) {
          oprot.writeFieldBegin(SUBJECT_FIELD_DESC);
          oprot.writeString(struct.Subject);
          oprot.writeFieldEnd();
        }
      }
      if (struct.CorrelationID != null) {
        if (struct.isSetCorrelationID()) {
          oprot.writeFieldBegin(CORRELATION_ID_FIELD_DESC);
          oprot.writeString(struct.CorrelationID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.Sequence != null) {
        if (struct.isSetSequence()) {
          oprot.writeFieldBegin(SEQUENCE_FIELD_DESC);
          oprot.writeString(struct.Sequence);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ClientID != null) {
        if (struct.isSetClientID()) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.ClientID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.AppID != null) {
        if (struct.isSetAppID()) {
          oprot.writeFieldBegin(APP_ID_FIELD_DESC);
          oprot.writeString(struct.AppID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.Route != null) {
        if (struct.isSetRoute()) {
          oprot.writeFieldBegin(ROUTE_FIELD_DESC);
          oprot.writeString(struct.Route);
          oprot.writeFieldEnd();
        }
      }
      if (struct.RawType != null) {
        if (struct.isSetRawType()) {
          oprot.writeFieldBegin(RAW_TYPE_FIELD_DESC);
          oprot.writeString(struct.RawType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTimestamp()) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
      }
      if (struct.UserHeader != null) {
        if (struct.isSetUserHeader()) {
          oprot.writeFieldBegin(USER_HEADER_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.UserHeader.size()));
            for (Map.Entry<String, String> _iter4 : struct.UserHeader.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BasicHeaderTupleSchemeFactory implements SchemeFactory {
    public BasicHeaderTupleScheme getScheme() {
      return new BasicHeaderTupleScheme();
    }
  }

  private static class BasicHeaderTupleScheme extends TupleScheme<BasicHeader> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BasicHeader struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.MessageID);
      oprot.writeString(struct.ExchangeName);
      oprot.writeI32(struct.ContentLength);
      oprot.writeString(struct.ContentEncoding);
      oprot.writeI32(struct.Serialization.getValue());
      oprot.writeI32(struct.Type.getValue());
      oprot.writeI32(struct.Compression.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetVersion()) {
        optionals.set(0);
      }
      if (struct.isSetSubject()) {
        optionals.set(1);
      }
      if (struct.isSetCorrelationID()) {
        optionals.set(2);
      }
      if (struct.isSetSequence()) {
        optionals.set(3);
      }
      if (struct.isSetClientID()) {
        optionals.set(4);
      }
      if (struct.isSetAppID()) {
        optionals.set(5);
      }
      if (struct.isSetRoute()) {
        optionals.set(6);
      }
      if (struct.isSetRawType()) {
        optionals.set(7);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(8);
      }
      if (struct.isSetUserHeader()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetVersion()) {
        oprot.writeString(struct.Version);
      }
      if (struct.isSetSubject()) {
        oprot.writeString(struct.Subject);
      }
      if (struct.isSetCorrelationID()) {
        oprot.writeString(struct.CorrelationID);
      }
      if (struct.isSetSequence()) {
        oprot.writeString(struct.Sequence);
      }
      if (struct.isSetClientID()) {
        oprot.writeString(struct.ClientID);
      }
      if (struct.isSetAppID()) {
        oprot.writeString(struct.AppID);
      }
      if (struct.isSetRoute()) {
        oprot.writeString(struct.Route);
      }
      if (struct.isSetRawType()) {
        oprot.writeString(struct.RawType);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetUserHeader()) {
        {
          oprot.writeI32(struct.UserHeader.size());
          for (Map.Entry<String, String> _iter5 : struct.UserHeader.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BasicHeader struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.MessageID = iprot.readString();
      struct.setMessageIDIsSet(true);
      struct.ExchangeName = iprot.readString();
      struct.setExchangeNameIsSet(true);
      struct.ContentLength = iprot.readI32();
      struct.setContentLengthIsSet(true);
      struct.ContentEncoding = iprot.readString();
      struct.setContentEncodingIsSet(true);
      struct.Serialization = com.ctrip.cmessaging.client.content.SerializationType.findByValue(iprot.readI32());
      struct.setSerializationIsSet(true);
      struct.Type = com.ctrip.cmessaging.client.content.MessageType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      struct.Compression = com.ctrip.cmessaging.client.content.CompressionType.findByValue(iprot.readI32());
      struct.setCompressionIsSet(true);
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.Version = iprot.readString();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Subject = iprot.readString();
        struct.setSubjectIsSet(true);
      }
      if (incoming.get(2)) {
        struct.CorrelationID = iprot.readString();
        struct.setCorrelationIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.Sequence = iprot.readString();
        struct.setSequenceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ClientID = iprot.readString();
        struct.setClientIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.AppID = iprot.readString();
        struct.setAppIDIsSet(true);
      }
      if (incoming.get(6)) {
        struct.Route = iprot.readString();
        struct.setRouteIsSet(true);
      }
      if (incoming.get(7)) {
        struct.RawType = iprot.readString();
        struct.setRawTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.UserHeader = new HashMap<String,String>(2*_map6.size);
          for (int _i7 = 0; _i7 < _map6.size; ++_i7)
          {
            String _key8;
            String _val9;
            _key8 = iprot.readString();
            _val9 = iprot.readString();
            struct.UserHeader.put(_key8, _val9);
          }
        }
        struct.setUserHeaderIsSet(true);
      }
    }
  }

}

